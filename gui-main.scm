;gui-main.scm
;Kommandocentrat, tar emot kommandon från GUIt och skickar iväg instruktioner.

(load "Main.scm")
(load "Blue-civ.scm")
(load "Red-civ.scm")
(load "bitmaps.scm")
(load "tta-gui.scm")

(define main
  (let ((origin-click #f)
        (lingering-card #f)
        (lingering-card-position 0)                                                       
        (current-civ red-civ))
    
    ;Antingen lagrar ett ursprung eller utför ett kommando.
    
    (define (handle self object)
      (cond ((eq? origin-click #f) (set! origin-click object))
            (else (ask self 'execute origin-click object))))
    
    ;Generaliserad funktion för att bygga nya byggnader.
    (define (generalized-build building-name)
      (if (not (eq? #f (ask current-civ 'build-new building-name)))
          (begin (write-log "builds a new " (format "~a" building-name) ".")
                 (update-affected-cards 'mine)
                 (update-caller building-name current-civ))
          (write-log "failed in building a new " (format "~a" building-name) ".")))
    
    ;Generaliserad funktion för att förstöra byggnader.
    (define (generalized-destroy building-name)
      (if (not (eq? #f (ask current-civ 'destroy building-name)))
          (begin (write-log "destroys a " (format "~a" building-name) ".")
                 (set! origin-click #f)
                 (update-caller building-name current-civ))
          (write-log "tried to destroy a " (format "~a" building-name) ", but couldn't.")))
    
    ;Generaliserad funktion för att uppgradera byggnader.
    (define (generalized-upgrade origin destination)
      (if (not (eq? #f (ask current-civ 'upgrade-building origin destination)))
          (begin (write-log "upgrades a " (format "~a" origin) " to a " (format "~a" destination) ".")
                 (set! origin-click #f)
                 (update-affected-cards 'mine)
                 (update-caller origin current-civ)
                 (update-caller destination current-civ))
          (write-log "tried to upgrade a " (format "~a" origin) " to a " (format "~a" destination) " but couldn't.")))
    
    ;Bygger en ny byggnad då rabattkort används.
    (define (special-build building-name)
      (ask current-civ 'adjust 'minerals (+ 1 (ask lingering-card 'age)))
      (if (and (building-type-criteria? (ask lingering-card 'name) building-name)
               (not (eq? #f (ask current-civ 'build-new building-name))))
          (begin (write-log "uses a discount card and builds a new " (format "~a" building-name) ".")
                 (set! lingering-card #f)
                 (ask current-civ 'drop-card lingering-card-position)
                 (draw-hand current-civ)
                 (update-affected-cards 'mine)
                 (update-caller building-name current-civ)
                 (update-civilization current-civ))
          (begin (write-log "tried to build a new " (format "~a" building-name) ", using a dicsount card, but couldn't.")
                 (ask current-civ 'adjust 'minerals (- (+ 1 (ask lingering-card 'age))))
                 (set! lingering-card #f))
          ))
    
    ;Går rabattkortet att använda på byggnaden?
    (define (building-type-criteria? card-name building-name)
      (cond ((and (eq? card-name 'rich-land)
                  (or (eq? 'mine (ask current-civ 'building-command building-name 'type))
                      (eq? 'farm (ask current-civ 'building-command building-name 'type))))
             #t)
            ((and (eq? card-name 'ideal-building-site)
                  (urban-building? (ask current-civ 'building-command building-name 'type)))
             #t)
            (else #f)))
    
    ;Är byggnaden en urban building? (alla byggnader förutom farms och mines)
    (define (urban-building? building-type)
      (if (or (eq? building-type 'temple)
              (eq? building-type 'lab)
              (eq? building-type 'library)
              (eq? building-type 'theater)
              (eq? building-type 'arena))
          #t
          #f))
    
    ;Väntar ett specialkort på ytterliga anrop?
    (define (special-card?)
      (cond ((eq? lingering-card #f) #f)
            ((or (eq? (ask lingering-card 'name) 'ideal-building-site) 
                 (eq? (ask lingering-card 'name) 'rich-land)) #t))) 
    
    ;Försöker spelaren bygga en ny byggnad?
    (define (worker-pool->building? origin destination)
      (if (eq? origin 'worker-pool)
          (if (building? destination)
              #t
              #f)
          #f))
    ;Försöker spelaren förstöra en byggnad?
    (define (building->worker-pool? origin destination)
      (if (building? origin)
          (if (eq? destination 'worker-pool)
              #t
              #f)
          #f))
    
    ;Utför kommandon då rätt antal anrop kommit in.
    (define (execute self origin destination)
      (begin (cond 
               ;Byggnadskommandon.
               ((eq? origin destination) (set! origin-click #f))     
               ((and (special-card?) (building? destination)) (special-build destination))
               ((worker-pool->building? origin destination) (generalized-build destination))
               ((building->worker-pool? origin destination) (generalized-destroy origin))
               ((and (building? origin) (building? destination)) (generalized-upgrade origin destination))       
               
               ;Ökar befolkning.
               ((and (eq? origin 'population-pool) (eq? destination 'worker-pool))
                (if (eq? #f (ask current-civ 'increase-population))
                    (write-log "tried to increase it's population, but failed.")    
                    (begin (write-log "increases it's population.")
                           (update-affected-cards 'farm)))))
             (set! origin-click #f)
             (update-civilization current-civ)
             ))
    
    ;Plockar kort från brädet till civilisationen.
    (define (handle-card self position)
      (if (and (not (ask current-civ 'card-exists? (ask board 'get-card position)))
               (not (eq? #f (ask current-civ 'pick-card (ask board 'get-card position) position))))
          (begin (write-log "picks a " (format "~a" (ask (ask board 'get-card position) 'name)) ".")
                 (ask board 'remove-card (ask board 'get-card position))
                 (update-upper-board)
                 (draw-hand current-civ)
                 (government-update current-civ)
                 )
          (write-log "tried to pick a card, but failed.")
          ))
    
    ;Spelar ut ett kort från civilisationen.
    (define (play-card self position)
      (play-card-identifier (cdr (list-ref (ask current-civ 'civil-card-hand) (- position 1))) position))
    
    ;Identifierar kortet som spelas ut och vad det ska göra.
    (define (play-card-identifier card position)
      (cond ((or (eq? (ask card 'type) 'mine) 
                 (eq? (ask card 'type) 'farm)
                 (eq? (ask card 'type) 'temple)
                 (eq? (ask card 'type) 'lab)
                 (eq? (ask card 'type) 'library)
                 (eq? (ask card 'type) 'theater)
                 (eq? (ask card 'type) 'arena))
             (if (not (eq? #f (ask current-civ 'add-technology card)))
                 (begin (write-log "plays a new technology. He can now utilize " (format "~a" (ask card 'name)) ".")
                        (activate-canvas card)
                        (ask current-civ 'drop-card position)
                        (draw-hand current-civ)
                        (government-update current-civ))
                 (write-log "tried playing the " (format "~a" (ask card 'name)) " technology, but couldn't.")))
            ((eq? (ask card 'type) 'government) (begin (set! lingering-card card)
                                                       (set! lingering-card-position position)
                                                       (send revolution-frame show #t)))
            ((eq? (ask card 'type) 'special) (special-card card position))))
    
    ;Specialkortens funktioner
    (define (special-card card position)
      (cond ((eq? (ask card 'name) 'mineral-deposits)
             (if (< 0 (ask current-civ 'civil-actions))
                 (begin (ask current-civ 'adjust 'minerals (+ (ask card 'age) 1))
                        (ask current-civ 'adjust 'civil-actions -1)
                        (write-log "plays Mineral Deposits.")
                        (ask current-civ 'drop-card position)
                        (draw-hand current-civ)
                        (update-affected-cards 'mine)
                        (government-update current-civ)
                        )
                 (write-log "tried playing a Mineral Deposits, but couldn't.")))
            ((eq? (ask card 'name) 'bountiful-harvests)
             (if (< 0 (ask current-civ 'civil-actions))
                 (begin (ask current-civ 'adjust 'food (+ (ask card 'age) 1))
                        (ask current-civ 'adjust 'civil-actions -1)
                        (write-log "plays Bountiful Harvests")
                        (ask current-civ 'drop-card position)
                        (draw-hand current-civ)
                        (government-update current-civ)
                        (update-affected-cards 'farm))
                 (write-log "tried playing Bountiful Harvests, but couldn't.")))
            ((eq? (ask card 'name) 'frugality)
             (if (ask current-civ 'increase-population)
                 (begin (write-log "plays Frugality and increases population.")
                        (ask current-civ 'adjust 'food (+ 1 (ask card 'age)))
                        (ask current-civ 'drop-card position)
                        (draw-hand current-civ)
                        (update-affected-cards 'farm)
                        (update-civilization current-civ))
                 (write-log "tried playing Frugality, but couldn't")))
            ((or (eq? (ask card 'name) 'rich-land)
                 (eq? (ask card 'name) 'ideal-building-site))
             (begin (set! origin-click 'worker-pool)
                    (click-marker (get current-civ 'canvas current-civ))
                    (set! lingering-card card)
                    (set! lingering-card-position position)))
            ((eq? (ask card 'name) 'work-of-art)
             (if (< 0 (ask current-civ 'civil-actions))
                 (begin (ask current-civ 'adjust 'culture (- 6 (ask card 'age)))
                        (ask current-civ 'adjust 'civil-actions -1)
                        (ask current-civ 'drop-card position)
                        (draw-hand current-civ)
                        (government-update current-civ)
                        (update-upper-board)
                        (write-log "played a Work of Art and scores culture."))
                 (write-log "tried playing a Work of Art, but couldn't.")
                 ))
            ((eq? (ask card 'name) 'revolutionary-idea)
             (if (< 0 (ask current-civ 'civil-actions))
                 (begin (ask current-civ 'adjust 'civil-actions -1)
                        (ask current-civ 'adjust 'science (+ (ask card 'age) 1))
                        (ask current-civ 'drop-card position)
                        (draw-hand current-civ)
                        (update-lower-board)
                        (government-update current-civ)
                        (write-log "played a Revolutionary Idea and scores science.")
                        )
                 (write-log "tried playing a Revolutionary Idea, but couldn't.")))
            ))              
    ;Det fridfulla anropet för att byta statsskick.
    (define (peaceful-revolution self)
      (if (not (eq? #f (ask current-civ 'add-technology lingering-card)))
          (begin (write-log "made a peaceful revolution! It now has " (format "~a" (ask lingering-card 'name)) " as government!")
                 (ask current-civ 'drop-card lingering-card-position)
                 (government-update current-civ)
                 (update-lower-board)
                 (draw-hand current-civ)
                 )
          (write-log "tried to do a peaceful revolution, but couldn't."))
      (set! lingering-card #f))
    ;Det inte fullt lika fridfulla anropet för att byta statsskick.
    (define (military-revolution self)
      (if (not (eq? #f (ask current-civ 'revolution lingering-card)))
          (begin (write-log "made a military revolution! It now has " (format "~a" (ask lingering-card 'name)) " as government!")
                 (ask current-civ 'drop-card lingering-card-position)
                 (government-update current-civ)
                 (update-lower-board)
                 (draw-hand current-civ))
          (write-log "tried to do a military revolution, but couldn't."))
      (set! lingering-card #f))
    
    ;Den nuvarande civilisationens runda är slut.
    (define (end-turn self)
      (ask current-civ 'end-of-turn)
      (update-civilization current-civ)
      (end-turn-text)
      (update-affected-cards 'mine)
      (update-affected-cards 'farm)
      (next-civ)
      (ask board 'new-turn)
      (update-upper-board)
      (update-lower-board))
    

    (define (next-civ)
      (cond ((equal? current-civ blue-civ) (set! current-civ red-civ))
            ((equal? current-civ red-civ) (set! current-civ blue-civ))))
    
    (define (end-turn-text)
      (if (equal? current-civ blue-civ)
          (if (ask current-civ 'happy?)
              (write-log "ends its turn. It is now Red civilizations turn.")
              (write-log "ends its turn. Blue civilization is unhappy! It is now Red civilizations turn."))
          (if (ask current-civ 'happy?)
              (write-log "ends its turn. It is now Blue civilizations turn.")
              (write-log "ends its turn. Red civilization is unhappy! It is now Blue civilizations turn."))))
    
    ;Hanterar kommandoanrop till main.
    (define (self msg)
      (cond ((eq? msg 'handle) handle)
            ((eq? msg 'execute) execute)
            ((eq? msg 'origin-click) (lambda (self) origin-click))
            ((eq? msg 'current-civ) (lambda (self) current-civ))
            ((eq? msg 'handle-card) handle-card)
            ((eq? msg 'play-card) play-card)
            ((eq? msg 'peaceful-revolution) peaceful-revolution)
            ((eq? msg 'military-revolution) military-revolution)
            ((eq? msg 'lingering-card) (lambda (self) lingering-card))
            ((eq? msg 'end-turn) end-turn)
            ))
    self))
